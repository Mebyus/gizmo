package token

// Literal maps Kind to token static literal
var Literal = [...]string{
	empty: "EMPTY",

	EOF: "EOF",

	// Operators/punctuators

	Underscore:        "_",
	Address:           ".&",
	Indirect:          ".@",
	Plus:              "+",
	Minus:             "-",
	LogicalAnd:        "&&",
	LogicalOr:         "||",
	Equal:             "==",
	NotEqual:          "!=",
	LessOrEqual:       "<=",
	GreaterOrEqual:    ">=",
	LeftArrow:         "<-",
	RightArrow:        "=>",
	ShortAssign:       ":=",
	AddAssign:         "+=",
	SubtractAssign:    "-=",
	MultiplyAssign:    "*=",
	QuotientAssign:    "/=",
	RemainderAssign:   "%=",
	Pipe:              "|",
	Caret:             "^",
	LeftShift:         "<<",
	RightShift:        ">>",
	BitwiseAndNot:     "&^",
	Assign:            "=",
	Colon:             ":",
	DoubleColon:       "::",
	Semicolon:         ";",
	Asterisk:          "*",
	Quest:             "?",
	Ampersand:         "&",
	Not:               "!",
	Slash:             "/",
	Percent:           "%",
	Period:            ".",
	Comma:             ",",
	LeftAngle:         "<",
	RightAngle:        ">",
	LeftCurly:         "{",
	RightCurly:        "}",
	LeftSquare:        "[",
	RightSquare:       "]",
	LeftParentheses:   "(",
	RightParentheses:  ")",
	LeftDoubleSquare:  "[[",
	RightDoubleSquare: "]]",
	PropStart:         "#[",
	Compound:          ".{",
	IndirectIndex:     ".[",
	Insist:            ".!",
	Chain:             ".?",
	Chunk:             "[]",
	AutoLen:           "[_]",
	ArrayPointer:      "[*]",
	Nillable:          "?|",
	NillableChunk:     "[?]",

	// Keywords

	Import:    "import",
	Fn:        "fn",
	Jump:      "jump",
	Return:    "return",
	Cast:      "cast",
	Case:      "case",
	For:       "for",
	Else:      "else",
	If:        "if",
	Defer:     "defer",
	Bag:       "bag",
	Bind:      "bind",
	In:        "in",
	Var:       "var",
	Const:     "const",
	Type:      "type",
	Match:     "match",
	Enum:      "enum",
	Struct:    "struct",
	Union:     "union",
	Pub:       "pub",
	Unit:      "unit",
	Let:       "let",
	Declare:   "declare",
	Method:    "method",
	Namespace: "namespace",

	// Special literals

	Never: "never",
	Dirty: "dirty",
	Nil:   "nil",
	True:  "true",
	False: "false",

	LabelNext: "@.next",
	LabelEnd:  "@.end",

	// Non static literals

	Illegal:            "ILLEGAL",
	Identifier:         "IDN",
	String:             "STR",
	Character:          "CHAR",
	BinaryInteger:      "INT.BIN",
	OctalInteger:       "INT.OCT",
	DecimalInteger:     "INT.DEC",
	HexadecimalInteger: "INT.HEX",
	DecimalFloat:       "FLT.DEC",
}
