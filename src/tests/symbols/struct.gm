type Counter struct {
    names: []str,
    c: int,
    string_field: *Counter,
}

fn [Counter] inc() => int {
    let c: int = g.c;
    g.c += 1;
    return c;
}

fn use_counter(c: *Counter) => int {
    return c.inc();
}

type A struct {
    b: B,
    b2: *B,
    s: str,
    c: []C,
}

type B uint

type C struct {
    s: str,
    b: []*B,
    s2: [*]u8,
    // a: *A,
}

type D int

type E struct {
    d: D,
}

type K struct {
    // k: K,
    e: E,
    d: D,
}

// type F struct {
//     gg: *G,  
// }

// type G struct {
//     f: *F,
// }