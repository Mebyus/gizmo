fn inc(x: *int) => int {
    x.@ = 1 + x.@;
    let x2: int = x.@;

    if x2 >= 19 {
        return 19;
    }
    return x2;
}

fn use_inc() => int {
    var x: int = 1;
    let r: int = inc(x.&);
    x = 2;
    return r;
}

// top-level test comment
fn test_dead_code(a: int) {
    var x: int = a;
    x = "";
    defer use_inc();
    return;

    // line comment before statement
    let r: int = inc(x.&);
}

pub
fn test_assign() => uint {
    var c: uint = dirty;
    c = 1;
    c += 2;
    return c;
}

fn abs(a: int) => int {
    if a < 0 {
        return -a;
    }
    return a;
}

fn use_parens(a: int, b: int) => int {
    return (a + 2 * b) / 3;
}
