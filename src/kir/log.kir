type LogLevel u8 {
    LOG_LEVEL_DEBUG = 0,
    LOG_LEVEL_INFO  = 1,
    LOG_LEVEL_WARN  = 2,
    LOG_LEVEL_ERROR = 3,
}

let log_buf_size: uint = 1 << 14;

type Logger struct {
    buf: [log_buf_size]u8,

    name: str,

    // Underlying open file descriptor.
    // Log messages are saved to this file.
    fd: uint,

    level: LogLevel,
}

type LogFieldValue bag (u64, s64, f64, str)

type LogFieldKind u8 {
    LOG_FIELD_U64 = 1,
    LOG_FIELD_S64 = 2,
    LOG_FIELD_F64 = 3,
    LOG_FIELD_STR = 4,
}

type LogField struct {
    val: LogFieldValue,
    name: str,
    kind: LogFieldKind,
}

fun log_field_u64(name: str, x: u64) => LogField {
    var field: LogField = dirty;
    field.val.(u64) = x;
    field.name = name;
    field.kind = LOG_FIELD_U64;
    ret field;
}

type LogFieldsChunk struct {
    ptr: [*]LogField,
    len: uint,
}

fun make_log_fields_chunk(ptr: [*]LogField, len: uint) => LogFieldsChunk {
    var c: LogFieldsChunk = dirty;
    c.ptr = ptr;
    c.len = len;
    ret c;
}

fun log_info(lg: *Logger, s: str) {
    if lg.@.level > LOG_LEVEL_INFO {
        ret;
    }
}

fun log_info_fields(lg: *Logger, s: str, fields: LogFieldsChunk) {
    must(fields.len != 0);

    if lg.@.level > LOG_LEVEL_INFO {
        ret;
    }
}
