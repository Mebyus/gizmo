fun fmt_dec_digit(x: u8) => u8 {
	ret x + tint(u8, '0');
}

fun fmt_hex_digit(x: u8) => u8 {
	if x <= 9 {
		ret fmt_dec_digit(x);
	}
	ret x - 10 + tint(u8, 'A');
}

fun unsafe_fmt_hex_byte(buf: []u8, x: u8) => uint {
  	buf.ptr.[0] = fmt_hex_digit(x >> 4);
	buf.ptr.[1] = fmt_hex_digit(x & 0xF);
	ret 2;
}

let max_u16_hex_length: uint = 4;

// Formats a given u16 integer as a hexadecimal number of
// fixed width (=4) format, prefixing significant digits with
// zeroes if necessary. Buffer must be at least 4 bytes
// long.
//
// Returns number of bytes written to buffer (always 4).
fun unsafe_fmt_hex_prefix_zeroes_u16(buf: []u8, x: u16) => uint {
  var i: uint = max_u16_hex_length;
  // digits are written from least to most significant bit
  for i != 0 {
    i -= 1;
    let n: u8 = cast(u8, x & 0xF);
    buf.ptr.[i] = fmt_hex_digit(n);
    x = x >> 4;
  }

  ret max_u16_hex_length;
}

fun fmt_hex_prefix_zeroes_u16(buf: []u8, x: u16) => uint {
	if buf.len < max_u16_hex_length {
		ret 0;
	}
	must(buf.ptr != nil);

	ret unsafe_fmt_hex_prefix_zeroes_u16(buf, x);
}

let max_u64_hex_length: uint = 16;

// Formats a given u64 integer as a hexadecimal number of
// fixed width (=16) format, prefixing significant digits with
// zeroes if necessary. Buffer must be at least 16 bytes
// long.
//
// Returns number of bytes written to buffer (always 16).
fun unsafe_fmt_hex_prefix_zeroes_u64(buf: []u8, x: u64) => uint {
  var i: uint = max_u64_hex_length;
  // digits are written from least to most significant bit
  for i != 0 {
    i -= 1;
    let n: u8 = cast(u8, x & 0xF);
    buf.ptr.[i] = fmt_hex_digit(n);
    x = x >> 4;
  }

  ret max_u64_hex_length;
}

fun fmt_hex_prefix_zeroes_u64(buf: []u8, x: u64) => uint {
	if buf.len < max_u64_hex_length {
		ret 0;
	}
	must(buf.ptr != nil);

	ret unsafe_fmt_hex_prefix_zeroes_u64(buf, x);
}

// Puts decimal digits of a number in reverse order inside an array of bytes.
// Returns number of digits written.
//
// Array must have enough space to hold produced bytes.
//
// To clarify: last (least significant) digit is placed at ptr.[0].
fun unsafe_fmt_reverse_dec_u64(ptr: [*]u8, x: u64) => uint {
	var i: uint = 0;
	for {
		let n: u8 = tint(u8, x % 10);
		x /= 10;
		ptr.[i] = fmt_dec_digit(n);
		i += 1;
		if x == 0 {
			ret i;
		}
	}
}

#define MAX_U64_DEC_LENGTH => { 20 }

/*
Same as fmt_dec_u64, but has no buffer boundary checks.
*/
fun unsafe_fmt_dec_u64(buf: []u8, x: u64) => uint {
	var digits: [#.MAX_U64_DEC_LENGTH]u8 = dirty;
	let len: uint = unsafe_fmt_reverse_dec_u64(digits, x);
	unsafe_reverse_copy(buf.ptr, digits, len);
	ret len;
}

/*
Puts integer x into a given buffer as text in decimal format.

Returns number of bytes written. Returns 0 if buffer does not
have enough bytes for the operation.
*/
fun fmt_dec_u64(buf: []u8, x: u64) => uint {
	if buf.len == 0 {
		ret 0;
	}
	must(buf.ptr != nil);
	
	if buf.len >= #.MAX_U64_DEC_LENGTH {
		ret unsafe_fmt_dec_u64(buf, x);
	}
	
	var digits: [#.MAX_U64_DEC_LENGTH]u8 = dirty;
	let len: uint = unsafe_fmt_reverse_dec_u64(digits, x);
	if len > buf.len {
		// Not enough space in buffer to represent integer.
		ret 0;
	}

	unsafe_reverse_copy(buf.ptr, digits, len);
	ret len;
}

fun fmt_dec_s64(buf: []u8, x: s64) => uint {
	if x >= 0 {
		ret fmt_dec_u64(buf, cast(u64, x));
	}

	if buf.len < 2 {
		ret 0;
	}

	let n: uint = fmt_dec_u64(bx_slice_tail(buf, 1), cast(u64, -x));
	if n == 0 {
		ret 0;
	}
	buf.ptr.[0] = '-';
	ret n + 1;
}

fun make_str_fmt_dec_s64(buf: []u8, x: s64) => str {
	let n: uint = fmt_dec_s64(buf, x);
	ret bx_slice_head(buf, n);
}

test fmt_dec_s64(t: *Test) {
	var b: [21]u8 = dirty;
	var buf: []u8 = make_bx(b, 21);
	var s: str = dirty;

	s = make_str_fmt_dec_s64(buf, 0);
	if !str_equal(s, "0") {
		test_fail(t, "error 0");
		ret;
	}

	s = make_str_fmt_dec_s64(buf, 42349);
	if !str_equal(s, "42349") {
		test_fail(t, "error 1");
		ret;
	}

	s = make_str_fmt_dec_s64(buf, -1);
	if !str_equal(s, "-1") {
		test_fail(t, "error 2");
		ret;
	}

	s = make_str_fmt_dec_s64(buf, max_integer_s64);
	if !str_equal(s, "9223372036854775807") {
		test_fail(t, "error 3");
		ret;
	}

	s = make_str_fmt_dec_s64(buf, min_integer_s64);
	if !str_equal(s, "-9223372036854775808") {
		test_fail(t, "error 4");
		ret;
	}
}

type FormatBuffer struct {
	// Pointer to buffer memory.
	// Always not nil for initialized struct.
	ptr: [*]u8,

	// Content length. How many bytes is already written to buffer.
	// Length cannot be greater than capacity.
	len: uint,

	// Buffer storage capacity. Max bytes it can hold.
	cap: uint,
}

fun fmt_buffer_init(buf: *FormatBuffer, c: []u8) {
    must(c.ptr != nil);

    buf.@.ptr = c.ptr;
    buf.@.len = 0;
    buf.@.cap = c.len;
}

fun make_fmt_buffer(c: []u8) => FormatBuffer {
	var buf: FormatBuffer = dirty;
    fmt_buffer_init(buf.&, c);
	ret buf;
}

fun fmt_buffer_head(buf: *FormatBuffer) => []u8 {
	ret make_bx(buf.@.ptr, buf.@.len);
}

fun fmt_buffer_tail(buf: *FormatBuffer) => []u8 {
	ret make_bx(buf.@.ptr + buf.@.len, buf.@.cap - buf.@.len);
}

// Returns actual number of bytes written to buffer.
fun fmt_buffer_put_str(buf: *FormatBuffer, s: str) => uint {
	let n: uint = copy(fmt_buffer_tail(buf), s);
	buf.@.len += n;
	ret n;
}

fun fmt_buffer_put_byte(buf: *FormatBuffer, b: u8) => uint {
	var tail: []u8 = fmt_buffer_tail(buf);
	if tail.len == 0 {
		ret 0;
	}
	tail.ptr.[0] = b;
	buf.@.len += 1;
	ret 1;
}

fun fmt_buffer_put_hex_byte(buf: *FormatBuffer, x: u8) => uint {
	var tail: []u8 = fmt_buffer_tail(buf);
	if tail.len < 2 {
		ret 0;
	}
	unsafe_fmt_hex_byte(tail, x);
	buf.@.len += 2;
	ret 2;
}

fun fmt_buffer_put_nl(buf: *FormatBuffer) => uint {
	ret fmt_buffer_put_byte(buf, '\n');
}

fun fmt_buffer_put_space(buf: *FormatBuffer) => uint {
	ret fmt_buffer_put_byte(buf, ' ');
}

fun fmt_buffer_put_dec_u64(buf: *FormatBuffer, x: u64) => uint {
	let n: uint = fmt_dec_u64(fmt_buffer_tail(buf), x);
	buf.@.len += n;
	ret n;
}

fun fmt_buffer_put_dec_s64(buf: *FormatBuffer, x: s64) => uint {
	let n: uint = fmt_dec_s64(fmt_buffer_tail(buf), x);
	buf.@.len += n;
	ret n;
}

fun fmt_buffer_put_hex_prefix_zeroes_u16(buf: *FormatBuffer, x: u16) => uint {
	let n: uint = fmt_hex_prefix_zeroes_u16(fmt_buffer_tail(buf), x);
	buf.@.len += n;
	ret n;
}

fun fmt_buffer_put_hex_prefix_zeroes_u64(buf: *FormatBuffer, x: u64) => uint {
	let n: uint = fmt_hex_prefix_zeroes_u64(fmt_buffer_tail(buf), x);
	buf.@.len += n;
	ret n;
}

fun fmt_buffer_put_test(buf: *FormatBuffer, t: *Test) => uint {
    let start_len: uint = buf.@.len;

    fmt_buffer_put_byte(buf, '[');
    if t.@.failed {
        fmt_buffer_put_byte(buf, '*');
    } else {
        fmt_buffer_put_byte(buf, ' ');
    }
    fmt_buffer_put_byte(buf, ']');
    
    fmt_buffer_put_byte(buf, ' ');
    fmt_buffer_put_str(buf, t.@.name);
    if t.@.failed {
        fmt_buffer_put_byte(buf, ' ');
        fmt_buffer_put_byte(buf, '(');
        fmt_buffer_put_str(buf, t.@.error_text);
        fmt_buffer_put_byte(buf, ')');
    }
    fmt_buffer_put_nl(buf);

    ret buf.@.len - start_len;
}
