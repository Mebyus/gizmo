type ProcInitState struct {
    args: []str,
}

/*

Layout of memory at stack_start

***            --                                             -- low addresses
argc           -- number of process args                      -- 8 bytes
array_arg_ptr  -- array with argc number of pointers          -- 8 bytes each (times argc)
0              -- array_arg_ptr is terminated by nil pointer  -- 8 bytes
array_env_ptr  -- array with environment entry pointer        -- 8 bytes each (until nil terminator)
0              -- array_env_ptr is terminated by nil pointer  -- 8 bytes
***            --                                             -- high addresses

Each arg_ptr leads to zero-terminated byte array (C string) with argument's string value.
Each env_ptr leads to zero-terminated byte array (C string) with environment entry.

Environment entry has the following form: "<name>=<value>".

*/
fun platform_amd64_linux_read_proc_init_state(state: *ProcInitState, stack_start: *any) {
	let argc_ptr: *uint = cast(*uint, stack_start);
	let argc: uint = argc_ptr.@;
	must(argc <= state.@.args.len); // we provide only fixed amount of space in buffer to store chunk of strings

	// we want to skip 8 bytes of argc
	var args_ptr: [*][*]u8 = cast([*][*]u8, unsafe_anyptr_add(stack_start, 8));

	var i: uint = 0;
	for i < argc {
		var cstr_ptr: [*]u8 = args_ptr.[i]; // obtain pointer to C string with arg value
		if (cstr_ptr == nil) {
			// terminate early if we encounter nil pointer
			//
			// this is just a precaution, OS ABI (System V) guarantees
			// that there will be exactly argc number of non-nil valid pointers
			jump @.out;
		}

		state.@.args.ptr.[i] = unsafe_make_str_from_cstr_ptr(cstr_ptr);
		i += 1;
	}

	state.@.args.len = i;
}

fun main()

let max_proc_args: uint = 64;

pub // TODO: this function needs to be public while we use C compiler, because we place "static" by default for all functions 
fun start(stack_start: *any) => never {
	var args_buf: [max_proc_args]str = dirty;
	var state: ProcInitState = dirty;
	state.args.ptr = args_buf;
	state.args.len = max_proc_args;

	platform_amd64_linux_read_proc_init_state(state.&, stack_start);
	main();
	platform_amd64_linux_syscall_exit(0);
}
