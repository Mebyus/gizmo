type MemBlockTrace struct {
    id: u64,
}

type MemBlock struct {
    mem: []u8,
    trace: MemBlockTrace,
}

type MemError uint

// Allocator does not have enough space to allocate new block
// of specified size.
let MEM_ERROR_NO_SPACE: MemError = 1;

type MemArenaAllocator struct {
    ptr: [*]u8,
    pos: uint,
    cap: uint,
}

fun mem_arena_allocator_init(arena: *MemArenaAllocator, buf: []u8) {
    arena.@.ptr = buf.ptr;
    arena.@.pos = 0;
    arena.@.cap = buf.len;
}

fun mem_arena_alloc(arena: *MemArenaAllocator, block: *MemBlock, size: uint) => MemError {
	must(size != 0);

    let aligned_size: uint = align_uint(size, 0x10);
	let left_space: uint = arena.@.cap - arena.@.pos;
	if left_space < aligned_size {
		ret MEM_ERROR_NO_SPACE;
	}

	block.@.mem.ptr = arena.@.ptr + arena.@.pos;
	block.@.mem.len = aligned_size;
    block.@.trace.id = 0;
	
	arena.@.pos += aligned_size;
	ret nil;
}

type MemAllocatorKind uint {
    MEM_ALLOCATOR_ARENA = 1,
    MEM_ALLOCATOR_GP    = 2,
}

type MemAllocator struct {
    ptr: *any,
    kind: MemAllocatorKind,
}

fun wrap_mem_arena_allocator(arena: *MemArenaAllocator) => MemAllocator {
    var al: MemAllocator = dirty;
    al.ptr = cast(*any, arena);
    al.kind = MEM_ALLOCATOR_ARENA;
    ret al;
}

fun panic_mem_allocator_empty() => never {
    panic("");
}

fun panic_mem_allocator_unknown(kind: MemAllocatorKind) => never {
    panic("");
}

fun mem_alloc(al: MemAllocator, block: *MemBlock, size: uint) => MemError {
    if al.kind
    => nil { panic_mem_allocator_empty(); }
    => MEM_ALLOCATOR_ARENA {
        ret mem_arena_alloc(cast(*MemArenaAllocator, al.ptr), block, size);
    }
    => MEM_ALLOCATOR_GP { stub; }
    else { panic_mem_allocator_unknown(al.kind); }
}
