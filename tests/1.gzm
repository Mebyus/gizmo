namespace coven {}

fn default_namespace_function() {

}

const default_namespace_const: str = " default_const ";

namespace coven::os {

declare fn do_something()

fn do_something() {
    return;
}

fn add(a: u32, b: u32) => u32 {
    const c: u32 = a + b;
    return c;
}

const max_u32: u32 = 0xffffffff;

fn sub(a: i32, b: i32) => i32 {
    var c: i32 = dirty;
    c = a - b;
    return c;
}

// Calculate n-th fibonacci number
fn fib(n: u64) => u64 {
    if n == 0 {
        return 0;
    } else if n == 1 {
        return 1;
    } else {
        return fib(n-1) + fib(n-2);
    }
}

fn change_by_pointer(x: *i32) {
    if x == nil {
        return;
    }

    x.@ = -0xf4;
}

fn call_another_function() {
    fib(5);
}

fn change_array_pointer(a: [*]u8) {
    a.[0] = 'h';
    a.[1] = 'e';
    a.[2] = 'l';
    a.[3] = 'l';
    a.[4] = 'o';
}

type SourceFile struct {
    data: []u8,
}

method (SourceFile) size() => uarch {
    return data.len;
}

method (SourceFile) dummy() {}

method (SourceFile) ptr() => *[]u8 {
    return data.&;
}

type Pos struct {
    file: *SourceFile,

    line: u32,
    col:  u32,
}

const empty_string_test: str = "";
var hello: str = "Hello, world!";

var two: u32 = (1 + 1) - 0 * 2 * (0 + 1 - 0x0 * 7 - 8 + 0o11);

fn print_hello() {
    os::stdout.print(hello);
    os::stdout.flush();
}

/* 
    Test multiline comment

    This should be skipped by lexer
*/

#[ export = true ]
#[ link.name = "coven_stdout_write" ]
fn stdout_write(c: []u8) {
    os::stdout.write(c);
}

fn return_the_same_chunk(c: []Pos) => []Pos {
    return c;
}

fn for_loop_no_condition() {
    var i: uarch = 0;
    for {
        i += 1;
        if i > 27 {
            return;
        }
    }
}

fn for_loop_with_condition() {
    var i: uarch = 0;
    for i <= 45 {
        i += 1;
        if i > 27 {
            return;
        }
    }
}

fn if_with_always_true() => bool {
    if true {
        os::stdout.print("true branch");
    } else {
        // unreachable
        os::stdout.print("false branch");
    }

    return false;
}

fn take_array(a: [16]u64) {

}

fn use_type_cast() {
    var a: u64 = 28;

    const i: i32 = cast[ state.window.height: i32 ];
}

fn match_example(x: u64) => u8 {
    match x {
        case 0 => { return 1; }
        
        case 2 => {
            const r: u64 = x + 25;
            return r;
        }

        case 3 => {}

        else => {
            return ^x;
        }
    }

    return 0;
}

type Error enum u8 {
    Ok,
    EOF,

    Unknown = 0x10,

}

/*
fn loop_jumps() {
    var i: uarch = 0;
    for {
        i += 1;

        if i < 10 {
            jump @.next;
        }

        if i == 0 {
            jump @.end;
        }
    }
}
*/

}

fn add_numbers[[T]](x: T, y: T) => T {
    return x + y;
}

fn use_template(x: u32, y: u32) {
    return add_numbers[[u32]](x, y);
}

#[ linkage = "external" ]
#[ link.name = "another_link_name" ]
#[ deprecated = true ]
#[ abi = "c4" ]
declare fn with_external_linkage(x: *u32, y: *uarch) => i32
